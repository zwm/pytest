#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os 

phi_adj = [2048, 1209, 639, 324, 163, 81, 41, 20, 10, 5]

#print result
with open ('ul_cordic_pipeline.v', 'w') as fp:

    fp.write("// ul pipelined cordic\n")
    fp.write("module ul_cordic_pipeline (\n")
    fp.write("    input                   clk,\n")
    fp.write("    input                   rst_n,\n")
    fp.write("    input                   cordic_en,\n")
    fp.write("    input                   ang_en,\n")
    fp.write("    input       [14:0]      ang_val,        // R15S13\n")
    fp.write("    output                  amp_en,\n")
    fp.write("    output      [11:0]      amp_i,          // C12S9\n")
    fp.write("    output      [11:0]      amp_q,\n")
    fp.write("    output      [13:0]      inner_en\n")
    fp.write(");\n")
    fp.write("// Internal Signals\n")
    fp.write("//reg                     ang_en;            // angle pre-process\n")
    fp.write("reg                     ang_en_d1;         // cordic step 0\n")
    fp.write("// debug related signals\n")
    for i in range(10):     # 10 interation
        if i == 0:
            fp.write("reg                     ang_en_d2;    // cordic step 0\n")
            fp.write("reg     [13:0]          p_cdc_%0d;    // PHI R14U13\n" % (i))
            fp.write("reg     [25:0]          i_cdc_%0d;    // I\n" % (i))
            fp.write("reg     [25:0]          q_cdc_%0d;    // Q\n" % (i))
        else:
            fp.write("reg                     ang_en_d%0d;    // cordic step %0d\n" % (i+2, i))
            fp.write("reg     [13:0]          p_cdc_%0d;    // PHI R14U13\n" % (i))
            fp.write("reg     [25:0]          i_cdc_%0d;    // I\n" % (i))
            fp.write("reg     [25:0]          q_cdc_%0d;    // Q\n" % (i))
            fp.write("wire    [25:0]          t1_%0d;\n" % (i))
            fp.write("wire    [25:0]          t2_%0d;\n" % (i))
    fp.write("// end\n")
    fp.write("reg                     ang_en_d12;        // amplitude post-process 1 : (i,q)*flag\n")
    fp.write("reg                     ang_en_d13;        // output\n")
    for i in range(10):     # 10 interation
        if i == 0:
            fp.write("wire    [25:0]          i_cdc_ini;  // INIT I R26S23\n")
            fp.write("wire    [25:0]          q_cdc_ini;  // INIT Q R26S23\n")
        fp.write("wire    [13:0]          p_adj_%0d;    // ADJ PHI R14U13\n" % (i))
        fp.write("wire    [25:0]          i_adj_%0d;    // ADJ I\n" % (i))
        fp.write("wire    [25:0]          q_adj_%0d;    // ADJ Q\n" % (i))
    for i in range(11):     # 10 interation
        fp.write("reg     [ 1:0]          flag_%0d;\n" % (i))
    fp.write("wire [11:0] ki;             // R12U12\n")
    fp.write("assign ki = 12'd2487;\n")
    fp.write("reg     [7:0]               cnt;                // debug only\n")
    fp.write("always @(posedge clk or negedge rst_n) begin\n")
    fp.write("    if (~rst_n) begin\n")
    fp.write("        cnt <= 0;\n")
    fp.write("    end\n")
    fp.write("    else begin\n")
    fp.write("        if (ang_en_d2) begin\n")
    fp.write("            cnt <= cnt + 1;\n")
    fp.write("        end\n")
    fp.write("        else begin\n")
    fp.write("            cnt <= 0;\n")
    fp.write("        end\n")
    fp.write("    end\n")
    fp.write("end\n")
    fp.write("// control signals\n")
    fp.write("always @(posedge clk or negedge rst_n) begin\n")
    fp.write("    if (~rst_n) begin\n")
    fp.write("        ang_en_d1 <= 0;\n")
    fp.write("        ang_en_d2 <= 0;\n")
    fp.write("        ang_en_d3 <= 0;\n")
    fp.write("        ang_en_d4 <= 0;\n")
    fp.write("        ang_en_d5 <= 0;\n")
    fp.write("        ang_en_d6 <= 0;\n")
    fp.write("        ang_en_d7 <= 0;\n")
    fp.write("        ang_en_d8 <= 0;\n")
    fp.write("        ang_en_d9 <= 0;\n")
    fp.write("        ang_en_d10 <= 0;\n")
    fp.write("        ang_en_d11 <= 0;\n")
    fp.write("        ang_en_d12 <= 0;\n")
    fp.write("        ang_en_d13 <= 0;\n")
    fp.write("    end\n")
    fp.write("    else begin\n")
    fp.write("        if (cordic_en) begin\n")
    fp.write("            ang_en_d1 <= ang_en;\n")
    fp.write("            ang_en_d2 <= ang_en_d1;\n")
    fp.write("            ang_en_d3 <= ang_en_d2;\n")
    fp.write("            ang_en_d4 <= ang_en_d3;\n")
    fp.write("            ang_en_d5 <= ang_en_d4;\n")
    fp.write("            ang_en_d6 <= ang_en_d5;\n")
    fp.write("            ang_en_d7 <= ang_en_d6;\n")
    fp.write("            ang_en_d8 <= ang_en_d7;\n")
    fp.write("            ang_en_d9 <= ang_en_d8;\n")
    fp.write("            ang_en_d10 <= ang_en_d9;\n")
    fp.write("            ang_en_d11 <= ang_en_d10;\n")
    fp.write("            ang_en_d12 <= ang_en_d11;\n")
    fp.write("            ang_en_d13 <= ang_en_d12;\n")
    fp.write("        end\n")
    fp.write("    end\n")
    fp.write("end\n")
    fp.write("// stage 0 : pre-process of cordic\n")
    fp.write("reg     [ 1:0]          flag;           // 00: 1    01: -1      10: j       11: -j\n")
    fp.write("reg     [13:0]          ang_rnd;        // R14S13\n")
    fp.write("always @(posedge clk or negedge rst_n) begin\n")
    fp.write("    if (~rst_n) begin\n")
    fp.write("        flag <= 0;\n")
    fp.write("        ang_rnd <= 0;\n")
    fp.write("    end\n")
    fp.write("    else begin\n")
    fp.write("        if (cordic_en) begin\n")
    fp.write("            if (ang_en) begin\n")
    fp.write("                // if ang >= 1/2, ang = ang - 1/2, [4096, 16383], ang = ang - 4096\n")
    fp.write("                if (($unsigned(ang_val[14:0] >= 15'd4096)) && ($unsigned(ang_val[14:0] <= 15'd16383))) begin\n")
    fp.write("                    ang_rnd <= ang_val[13:0] - 14'd4096;\n")
    fp.write("                    flag <= 2'b10;\n")
    fp.write("                end\n")
    fp.write("                // else if ang < -1/2, ang = ang + 1/2, [16384, 28672], ang = ang + 4096\n")
    fp.write("                else if (($unsigned(ang_val[14:0] >= 15'd16384)) && ($unsigned(ang_val[14:0] <= 15'd28672))) begin\n")
    fp.write("                    ang_rnd <= ang_val[13:0] + 14'd4096;\n")
    fp.write("                    flag <= 2'b11;\n")
    fp.write("                end\n")
    fp.write("                else begin\n")
    fp.write("                    ang_rnd <= ang_val[13:0];\n")
    fp.write("                    flag <= 2'b00;\n")
    fp.write("                end\n")
    fp.write("            end\n")
    fp.write("        end\n")
    fp.write("    end\n")
    fp.write("end\n")
    fp.write("// Name Alias\n")
    fp.write("wire [13:0] phi_rnd; // R14S13\n")
    fp.write("assign phi_rnd = ang_rnd;\n")

    # Cordic 10 Stages
    for i in range(10):     # 10 interation
        fp.write("// stage %0d : cordic stage %0d\n" % ((i+1), i))
        if i == 0:
            fp.write("assign i_cdc_ini = 26'h0800000;     // 1\n")
            fp.write("assign q_cdc_ini = 26'h0000000;     // 0\n")
        if i == 0:
            pp = phi_adj[i]
            fp.write("assign p_adj_0 = (phi_rnd[13] == 1 || phi_rnd[12:0] == 0) ? (-14'd%0d) : 14'd%0d;\n" % (pp, pp))
            fp.write("assign i_adj_0 = (phi_rnd[13] == 1 || phi_rnd[12:0] == 0) ? (-q_cdc_ini) : q_cdc_ini;\n")
            fp.write("assign q_adj_0 = (phi_rnd[13] == 1 || phi_rnd[12:0] == 0) ? (-i_cdc_ini) : i_cdc_ini;\n")
        else:
            pp = phi_adj[i]
            fp.write("assign p_adj_%0d = (p_cdc_%0d[13] == 1 || p_cdc_%0d[12:0] == 0) ? (-14'd%0d) : 14'd%0d;\n" % (i, (i-1), (i-1), pp, pp))
            fp.write("assign i_adj_%0d = (p_cdc_%0d[13] == 1 || p_cdc_%0d[12:0] == 0) ? (-q_cdc_%0d) : q_cdc_%0d;\n" % (i, (i-1), (i-1), (i-1), (i-1)))
            fp.write("assign q_adj_%0d = (p_cdc_%0d[13] == 1 || p_cdc_%0d[12:0] == 0) ? (-i_cdc_%0d) : i_cdc_%0d;\n" % (i, (i-1), (i-1), (i-1), (i-1)))
            fp.write("assign t1_%0d = {{%0d{i_adj_%0d[25]}}, i_adj_%0d[25:%0d]};\n" % (i, i, i, i, i))
            fp.write("assign t2_%0d = {{%0d{q_adj_%0d[25]}}, q_adj_%0d[25:%0d]};\n" % (i, i, i, i, i))
        fp.write("always @(posedge clk or negedge rst_n) begin\n")
        fp.write("    if (~rst_n) begin\n")
        fp.write("        i_cdc_%0d <= 0;\n" % (i))
        fp.write("        q_cdc_%0d <= 0;\n" % (i))
        fp.write("        p_cdc_%0d <= 0;\n" % (i))
        fp.write("        flag_%0d <= 0;\n" % (i))
        fp.write("    end\n")
        fp.write("    else begin\n")
        fp.write("        if (cordic_en) begin\n")
        fp.write("            if (ang_en_d%0d) begin\n" % (i+1))
        if i == 0:
            fp.write("                flag_0 <= flag;\n")
            fp.write("                p_cdc_0 <= phi_rnd - p_adj_%0d;\n" % (i))
            fp.write("                i_cdc_0 <= i_cdc_ini - i_adj_0;\n")
            fp.write("                q_cdc_0 <= q_cdc_ini + q_adj_0;\n")
        else:
            fp.write("                flag_%0d <= flag_%0d;\n" % (i, i-1))
            fp.write("                p_cdc_%0d <= p_cdc_%0d - p_adj_%0d;\n" % (i, (i-1), i))
            fp.write("                i_cdc_%0d <= i_cdc_%0d - t1_%0d;\n" % (i, (i-1), i))
            fp.write("                q_cdc_%0d <= q_cdc_%0d + t2_%0d;\n" % (i, (i-1), i))
        fp.write("            end\n")
        fp.write("        end\n")
        fp.write("    end\n")
        fp.write("end\n")

    fp.write("// stage 11 : (i, q) * ki\n")
    fp.write("wire    [38:0]          i_mul_ki;   // C26S23*R13U12 = R39S35\n")
    fp.write("wire    [38:0]          q_mul_ki;\n")
    fp.write("reg     [11:0]          i_ki;       // C12S9\n")
    fp.write("reg     [11:0]          q_ki;\n")
    fp.write("assign i_mul_ki = $signed(i_cdc_9) * $signed({1'd0, ki});\n")
    fp.write("assign q_mul_ki = $signed(q_cdc_9) * $signed({1'd0, ki});\n")
    fp.write("//wire [12:0] i_round;    // R13S9\n")
    fp.write("//wire [12:0] q_round;\n")
    fp.write("//assign i_round = i_mul_ki[25] ? (i_mul_ki[38] ? (i_mul_ki[38:26] - 1) : (i_mul_ki[38:26] + 1)) : i_mul_ki[38:26];\n")
    fp.write("//assign q_round = q_mul_ki[25] ? (q_mul_ki[38] ? (q_mul_ki[38:26] - 1) : (q_mul_ki[38:26] + 1)) : q_mul_ki[38:26];\n")
    fp.write("wire [12:0] i_floor;    // R13S9\n")
    fp.write("wire [12:0] q_floor;\n")
    fp.write("assign i_floor = i_mul_ki[38:26];\n")
    fp.write("assign q_floor = q_mul_ki[38:26];\n")
    fp.write("wire [11:0] i_sat;      // R12S9\n")
    fp.write("wire [11:0] q_sat;\n")
    fp.write("assign i_sat = (i_floor[12] == 0 && i_floor[11:0] > 12'h7ff) ? 12'h7ff : ((i_floor[12] == 1 && i_floor[11:0] < 12'h800) ? 12'h800 : i_floor[11:0]);\n")
    fp.write("assign q_sat = (q_floor[12] == 0 && q_floor[11:0] > 12'h7ff) ? 12'h7ff : ((q_floor[12] == 1 && q_floor[11:0] < 12'h800) ? 12'h800 : q_floor[11:0]);\n")
    fp.write("always @(posedge clk or negedge rst_n) begin\n")
    fp.write("    if (~rst_n) begin\n")
    fp.write("        i_ki <= 0;\n")
    fp.write("        q_ki <= 0;\n")
    fp.write("        flag_10 <= 0;\n")
    fp.write("    end\n")
    fp.write("    else begin\n")
    fp.write("        if (cordic_en) begin\n")
    fp.write("            if (ang_en_d11) begin   // Truncate Method: signed floor\n")
    fp.write("                flag_10 <= flag_9;\n")
    fp.write("                i_ki <= i_sat;\n")
    fp.write("                q_ki <= q_sat;\n")
    fp.write("            end\n")
    fp.write("        end\n")
    fp.write("    end\n")
    fp.write("end\n")
    fp.write("// stage 12 : (i, q) * flag\n")
    fp.write("reg     [11:0]          i;\n")
    fp.write("reg     [11:0]          q;\n")
    fp.write("always @(posedge clk or negedge rst_n) begin\n")
    fp.write("    if (~rst_n) begin\n")
    fp.write("        i <= 0;\n")
    fp.write("        q <= 0;\n")
    fp.write("    end\n")
    fp.write("    else begin\n")
    fp.write("        if (cordic_en) begin\n")
    fp.write("            if (ang_en_d12) begin\n")
    fp.write("                case (flag_10)\n")
    fp.write("                    2'b00 : begin       // 1\n")
    fp.write("                        i <= +i_ki;\n")
    fp.write("                        q <= +q_ki;\n")
    fp.write("                    end\n")
    fp.write("                    2'b01 : begin       // -1\n")
    fp.write("                        i <= -i_ki;\n")
    fp.write("                        q <= -q_ki;\n")
    fp.write("                    end\n")
    fp.write("                    2'b10 : begin       // j\n")
    fp.write("                        i <= -q_ki;     // i = -q\n")
    fp.write("                        q <= +i_ki;     // q = i\n")
    fp.write("                    end\n")
    fp.write("                    2'b11 : begin       // -j\n")
    fp.write("                        i <= +q_ki;     // i = q\n")
    fp.write("                        q <= -i_ki;     // q = -i\n")
    fp.write("                    end\n")
    fp.write("                endcase\n")
    fp.write("            end\n")
    fp.write("        end\n")
    fp.write("    end\n")
    fp.write("end\n")
    fp.write("// output\n")
    fp.write("assign amp_en = ang_en_d13;\n")
    fp.write("assign amp_i  = i;\n")
    fp.write("assign amp_q  = q;\n")
    fp.write("assign inner_en[13] = ang_en_d13;\n")
    fp.write("assign inner_en[12] = ang_en_d12;\n")
    fp.write("assign inner_en[11] = ang_en_d11;\n")
    fp.write("assign inner_en[10] = ang_en_d10;\n")
    fp.write("assign inner_en[9] = ang_en_d9;\n")
    fp.write("assign inner_en[8] = ang_en_d8;\n")
    fp.write("assign inner_en[7] = ang_en_d7;\n")
    fp.write("assign inner_en[6] = ang_en_d6;\n")
    fp.write("assign inner_en[5] = ang_en_d5;\n")
    fp.write("assign inner_en[4] = ang_en_d4;\n")
    fp.write("assign inner_en[3] = ang_en_d3;\n")
    fp.write("assign inner_en[2] = ang_en_d2;\n")
    fp.write("assign inner_en[1] = ang_en_d1;\n")
    fp.write("assign inner_en[0] = ang_en;\n")
    fp.write("\n")
    fp.write("endmodule\n")




